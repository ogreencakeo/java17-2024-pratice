예외 처리(Exception Handling)는 프로그램 실행 중에 발생할 수 있는 예기치 않은 상황에 대비하여 프로그램을 안정적으로 실행하기 위한 기술이다. 
자바에서는 예외 처리를 위해 다양한 구문과 방법을 제공한다.
예외 처리는 프로그램의 안정성을 높이고 예기치 않은 상황에 대비하여 비정상적인 종료를 방지하는 중요한 개념이다. 
잘못된 예외 처리는 프로그램의 안정성을 저하시킬 수 있으므로 신중하게 다루어져야 한다.

[ try-catch-finally 구문 ]
try: 예외가 발생할 수 있는 코드 블록을 정의한다. 
    try 블록 내에서 예외가 발생하면 해당 예외를 catch 블록에서 처리한다.

catch: 예외 처리를 담당하는 블록으로, try 블록에서 발생한 예외를 잡아서 처리한다.
    catch 블록은 발생한 예외의 종류에 따라 여러 개를 정의할 수 있다.

finally: 선택적으로 사용할 수 있는 블록으로, 예외 발생 여부에 관계없이 항상 실행된다. 
    주로 리소스 해제나 정리 작업에 사용된다.

try {
    // 예외가 발생할 수 있는 코드
    int result = 10 / 0; // ArithmeticException 발생
} catch (ArithmeticException e) {
    // 예외 처리
    System.out.println("0으로 나눌 수 없습니다.");
} finally {
    // 리소스 정리
    System.out.println("예외 처리 완료");
}

[ 다중 catch ]
여러 종류의 예외를 처리할 때, 각 예외에 대해 별도의 catch 블록을 사용할 수 있다.
try {
    // 예외 발생 가능한 코드
    int[] arr = new int[3];
    arr[3] = 10; // ArrayIndexOutOfBoundsException 발생
    int result = 10 / 0; // ArithmeticException 발생
} catch (ArrayIndexOutOfBoundsException e) {
    System.out.println("배열 인덱스 오류 발생");
} catch (ArithmeticException e) {
    System.out.println("산술 연산 오류 발생");
}

[ 멀티 catch문 (Java 7 이상) ]
여러 예외를 하나의 catch 블록에서 처리할 수 있다.
try {
    // 예외 발생 가능한 코드
    int[] arr = new int[3];
    arr[3] = 10; // ArrayIndexOutOfBoundsException 발생
    int result = 10 / 0; // ArithmeticException 발생
} catch (ArrayIndexOutOfBoundsException | ArithmeticException e) {
    System.out.println("예외 발생: " + e.getMessage());
}

[throws]
메서드에서 예외를 직접 처리하지 않고 호출한 쪽으로 예외를 던지는 것을 의미한다. 
메서드 선언부에 throws 구문을 사용하여 해당 메서드에서 발생할 수 있는 예외를 명시한다.
public void readFile() throws IOException {
    // 파일 읽기 코드
    BufferedReader br = new BufferedReader(new FileReader("file.txt"));
    // 예외 발생 시 IOException 던지기
}

[throw]
개발자가 직접 예외를 발생시킬 때 사용한다. 
throw 키워드 뒤에는 발생시킬 예외 객체를 지정한다.
public void checkAge(int age) {
    if (age < 0) {
        throw new IllegalArgumentException("나이는 음수일 수 없습니다.");
    }
}

