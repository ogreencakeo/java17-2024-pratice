[ 스레드(Thread) ]
자바에서의 스레드(Thread)는 프로그램 내에서 독립적으로 실행될 수 있는 하나의 작업 단위를 의미합니다. 
스레드는 CPU의 코어를 효율적으로 활용하여 여러 작업을 동시에 처리할 수 있도록 해줍니다. 
이를 통해 멀티태스킹과 멀티프로세스를 구현할 수 있습니다.

[ 멀티태스킹(Multitasking) ]
하나의 시스템에서 여러 작업을 동시에 수행하는 것을 의미합니다. 
멀티태스킹은 동시에 여러 작업을 수행하는 것처럼 보이지만, 실제로는 각 작업이 작은 단위로 번갈아가며 실행되는 것입니다.

[ 멀티프로세스(Multiprocess) ]
여러 개의 프로세스가 동시에 실행되는 것을 의미합니다. 
각 프로세스는 독립적으로 메모리 공간을 가지며, 운영체제에 의해 별도의 자원을 할당받습니다.

[ 멀티스레드(Multithreading) ] 
하나의 프로세스 내에서 여러 개의 스레드가 동시에 실행되는 것을 의미합니다. 
각 스레드는 프로세스 내에서 공유하는 메모리 공간을 가지며, 여러 작업을 병렬적으로 처리할 수 있습니다.

[ 메인 스레드(Main Thread) ] 
자바 프로그램이 실행될 때 자동으로 생성되는 기본 스레드입니다. 
모든 자바 프로그램은 메인 스레드에서 시작하며, main() 메서드가 실행됩니다.

[ 싱글 스레드(Single Thread) ]
하나의 스레드만을 사용하여 작업을 처리하는 것을 의미합니다. 
순차적으로 작업을 처리하기 때문에 동시에 여러 작업을 수행할 수 없습니다.

[ 멀티 스레드(Multi Thread) ]
여러 개의 스레드를 사용하여 작업을 처리하는 것을 의미합니다. 
각 스레드는 독립적으로 실행되며, 서로 다른 작업을 동시에 수행할 수 있습니다.

[ 작업 스레드(Worker Thread) ]
메인 스레드 이외의 추가적인 스레드를 말합니다. 
주로 메인 스레드에서 처리하기 어려운 작업이나 백그라운드 작업을 처리할 때 사용됩니다. 
작업 스레드는 필요에 따라 생성되어 작업을 수행한 뒤 종료될 수 있습니다.

자바에서는 멀티스레딩을 지원하기 위해 java.lang.Thread 클래스를 제공하고 있습니다. 
스레드를 구현하는 방법은 Thread 클래스를 상속받거나 Runnable 인터페이스를 구현하는 두 가지 방식이 있습니다.

[ 작업 스레드 이름 (Thread Name)] 
각 스레드는 고유한 이름을 가질 수 있습니다. 스레드의 이름은 스레드를 식별하기 위해 사용됩니다. 
주로 디버깅이나 로깅에 활용됩니다.

[ 동시성 (Concurrency) ]
동시성은 여러 작업이 동시에 진행되는 것처럼 보이는 개념을 말합니다.
하나의 프로세서에서 여러 스레드가 번갈아가며 실행되어 마치 동시에 실행되는 것처럼 보입니다.

[ 병렬성 (Parallelism) ]
병렬성은 여러 작업이 동시에 실제로 실행되는 것을 의미합니다. 
멀티코어 CPU에서 각 코어가 병렬적으로 작업을 처리하는 것을 말합니다.

[ 스레드 스케줄링 (Thread Scheduling) ]
스레드 스케줄링은 다수의 스레드 중에서 어떤 스레드를 실행시킬지 결정하는 것을 말합니다. 
운영체제 또는 JVM에서 스케줄러가 스레드 실행을 조정합니다.

[ 스레드 우선순위 (Thread Priority) ] 
스레드 우선순위는 각 스레드가 실행되는 우선순위를 결정합니다. 
우선순위가 높은 스레드는 CPU 시간을 더 많이 할당받을 수 있습니다.

[ 싱글코어 (Single-core) ]
싱글코어는 하나의 CPU 코어만을 가지고 있는 시스템을 의미합니다. 
하나의 코어에서는 한 번에 하나의 스레드만 실행됩니다.

[ 멀티코어 (Multi-core) ] 
멀티코어는 여러 개의 CPU 코어를 가지고 있는 시스템을 의미합니다. 
멀티코어 시스템에서는 동시에 여러 개의 스레드가 병렬적으로 실행될 수 있습니다.

[ 동기화 메서드 (Synchronized Method) ]
메서드 선언 시 synchronized 키워드를 사용하여 정의된 메서드를 의미합니다. 
이 메서드는 특정 객체의 락(lock)을 획득하여 다른 스레드들이 동시에 실행하지 못하도록 합니다. 
한 스레드가 이 메서드를 실행 중이면, 다른 스레드는 해당 객체의 동기화 메서드를 호출할 때까지 기다리게 됩니다.

public synchronized void synchronizedMethod() {
    // 메서드 코드
}

[ 동기화 블록 (Synchronized Block) ]
메서드 내부의 일부 코드 블록을 동기화하는 방법입니다. 
객체의 락(lock)을 획득하기 위해 synchronized 키워드를 사용하며, 특정 객체의 락을 사용하여 다른 스레드의 접근을 제어합니다.

synchronized (lockObject) {
    // 동기화가 필요한 코드 블록
}

[ 동기화 ]
멀티스레드 환경에서 공유 자원에 대한 접근을 조절하는 메커니즘을 말합니다. 
동기화를 통해 여러 스레드가 동시에 접근하는 것을 방지하고, 데이터 일관성을 유지할 수 있습니다.

[ synchronized 키워드 ]
자바에서는 synchronized 키워드를 사용하여 동기화를 구현합니다. 
이 키워드를 메서드나 코드 블록 앞에 붙이면, 해당 영역의 실행이 완료될 때까지 다른 스레드들은 대기하게 됩니다.

[ 임계영역 ]
동기화 메커니즘을 통해 보호되어야 하는 공유 자원을 접근하는 코드 영역을 말합니다. 
임계영역에 진입하기 위해서는 동기화 메커니즘이 필요합니다.

[ 스레드 상태 ] 
자바 스레드는 여러 상태를 가질 수 있습니다.
NEW: 스레드가 생성된 상태.
RUNNABLE: 실행 가능한 상태로, 실행 대기 중이거나 실행 중인 상태.
BLOCKED: 동기화 블록이나 메서드에서 락을 기다리는 상태.
WAITING: 다른 스레드가 통지(notify)할 때까지 기다리는 상태.
TIMED_WAITING: 일정 시간 동안 기다리는 상태.
TERMINATED: 실행을 완료한 상태.

[ 객체 생성 (Object Creation) ]
new 키워드를 사용하여 객체를 생성합니다. 
예를 들어, Thread 클래스의 인스턴스를 생성하여 스레드를 생성할 수 있습니다.

Thread myThread = new Thread();

[ 실행 대기 (Runnable) ]
Thread 클래스의 start() 메서드를 호출하여 스레드를 실행 대기 상태로 만듭니다.

myThread.start();

[ 일시정지 (Pause) ]
Thread.sleep() 메서드를 사용하여 스레드를 일시적으로 일시정지시킬 수 있습니다. 
일정 시간 동안 대기 상태로 전환됩니다.

try {
    Thread.sleep(1000); // 1초 동안 일시정지
} catch (InterruptedException e) {
    e.printStackTrace();
}

[ 종료 (Termination) ] 
스레드가 실행을 완료하거나, stop() 메서드를 호출하여 강제로 스레드를 종료할 수 있습니다. 
종료된 스레드는 TERMINATED 상태가 됩니다.

myThread.stop(); // 스레드 강제 종료

[ 스레드 상태제어 ]
스레드 상태 제어는 스레드의 실행을 제어하고 조절하는 기능을 말합니다. 
다양한 상태 제어 메서드들이 있으며, 각 메서드는 스레드의 동작을 조절하거나 다른 스레드와의 상호작용을 가능하게 합니다. 
여러 스레드가 협력적으로 동작하고 효율적으로 자원을 공유하기 위해 이러한 상태 제어 메서드들이 사용됩니다. 각 메서드들에 대해 간단히 설명해드리겠습니다.

yield():
현재 실행 중인 스레드가 다른 동등한 우선순위의 스레드에게 실행을 양보하고, 다시 스케줄링 대기 상태로 돌아갑니다.
다른 스레드에게 실행 기회를 주는 데 사용됩니다.

interrupt():
다른 스레드를 중단시키기 위해 사용되며, 해당 스레드가 InterruptedException을 발생시킵니다. 
스레드가 일시적으로 중단되거나 종료되도록 제어할 수 있습니다.

notify():
객체의 wait() 메서드에 의해 대기 중인 다른 스레드 중 하나를 깨웁니다. 
이 때 하나의 스레드만을 깨우며, 어떤 스레드가 깨어날지는 결정할 수 없습니다.

notifyAll():
객체의 wait() 메서드에 의해 대기 중인 모든 스레드를 깨웁니다. 
모든 스레드가 대기 상태에서 벗어나 실행 대기 상태가 됩니다.

sleep(long millis):
현재 실행 중인 스레드를 일정 시간 동안 일시정지 상태로 만듭니다.
 주어진 시간(ms) 동안 스레드가 대기하며, 지정된 시간이 경과하면 다시 실행 대기 상태로 돌아갑니다.

join():
다른 스레드가 종료될 때까지 현재 스레드를 일시정지시킵니다. 
다른 스레드가 종료되면 현재 스레드가 다시 실행됩니다.

wait(), notify(), notifyAll():
wait(): 
스레드가 객체의 모니터 락을 반납하고 대기 상태로 들어갑니다. 
다른 스레드가 notify() 또는 notifyAll()을 호출하여 스레드를 깨울 때까지 대기합니다.

notify(): 
객체의 모니터 락을 소유하고 있는 스레드 중 하나를 대기 중인 스레드 중에서 임의로 선택하여 깨웁니다.

notifyAll(): 
객체의 모니터 락을 소유하고 있는 스레드 중 모든 대기 중인 스레드를 깨웁니다.
이러한 상태 제어 메서드들은 다양한 상황에서 스레드 간의 동기화와 협력을 가능하게 하여 다중 스레드 프로그래밍을 보다 효율적으로 관리할 수 있도록 합니다.