[ 컬렉션 프레임워크란 무엇인가? ]
우리가 프로그래밍 언어를 배워서 코드를 작성하는 여러 이유 중 으뜸은 아마도 데이터 처리에 있을 것이다.
대부분의 프로그래밍 언어는 이러한 데이터 처리를 효율적으로 처리하기 위한 여러 문법적 장치를 제공 ~> 변수, 배열 등...
변수나 배열과 같은 문법을 대부분의 프로그래밍 언어에서 제공하고 있는 기능이다.

배열은 컴퓨터 메모리상에서 작업자가 데이터를 효율적으로 관리하고 사용할 수 있도록 해주는 대표적인 "자료구조"이다.
그러나 배열은 단점이 있는데, 처음 생성할 때 정한 사이즈로 사용해야 하고, 이후에 사이즈 변경을 할 수가 없다.
그러다보니 과거에는 배열에 데이터가 꽉 차게되면 배열의 길이를 눌려 데이터 이전을 하는 방식 등으로 배열의 길이를 늘리곤 했다.

자바는 다양한 데이터들을 보다 효율적으로 처리하고 관리, 저장 할 수 있도록 해주는 클래스들을 여러 개 만들었는데,
그러한 클래스들을 모두 모아서 "컬렉션 프레임워크"라고 총칭한다.

컬렉션 프레임워크의 클래스들은 "제네릭"기반으로 구현되어 있기에 선행학습으로 제네릭 문법에 대해서 기본은 알고 있어야 한다.

[ 컬렉션 프레임워크 계층 구조 ]
Iterable(i)
                Collection(i)
                                List(i)     ArrayList       Vector      LinkedList      Stack(벡터 하위)
                                Set(i)      HashSet         TreeSet
                                Queue(i)

                                Map(i)      HashMap         HashTable   TreeMap

- 모든 컬렉션의 최상위에는 Iterable 인터페이스가 존재
- Iterable을 상속한 Collection은 구현체가 공통으로 가져야 하는 기능들이 추상 메서드로 정의
- 특이점 : Map 계열의 컬렉션들은 Collection 인터페이스를 상속하지 않고, 별도의 계층 구조를 가지고 있음을 기억

- 중요한 것은 각각의 인터페이스가 어떤 특징을 갖고 있는지 잘 기억하고 있어야 한다.
- 특징이란 구현 클래스가 어떻게 데이터를 처리하고 관리하는지를 아는 것이며, 이를 알고 있어야 적절한 클래스를 골라 쓸 수 있다.

[ 주요 인터페이스 3개의 특징 ]
List    순서가 있는 데이터 집합, 중복 허용
        구현 클래스     ArrayList    Vector       LinkedList      Stack
Set     순서가 없는 데이터 집합, 중복 허용 X
        구현 클래스     HashSet      TreeSet

Map     <key, value> 쌍으로 이루어진 데이터 잡합, 순서는 없음, 키는 중복이 안되나 값은 중복 가능
        구현 클래스     HashMap      HashTable    TreeMap

- 위 클래스들은 참조 타입의 객체 데이터만 저장이 가능
- 따라서, 기본형 타입의 원시 자료형을 저장하려면 wrapper 클래스를 이용해야 한다.
- 구현 클래스들은 상위 인터페이스를 상속받고 있으므로, 상위 인터페이스 어떤 메서드가 있는지 잘 알고 있는게 작업시 도움이 된다.