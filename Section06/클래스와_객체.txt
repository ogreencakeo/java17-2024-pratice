1. 패키지
    - 패키지는 폴더다
    - 그냥 폴더라고 이름 지었으면 사람들이 더 쉽게 이해했을 텐데...
    - 패키지는 클래스 파일들을 관련성 있는 것들끼리 묶어 보다 효율적으로 관리하기 위한 기법

2. 그럼 클래스란 무엇인가?
    - 클래스를 부르는 다양한 명칭(?)들을 살펴보면 이해하는데 도움 ~> 틀(Frame), 설계도, 공장
    - 도시 건설 게임 심시티를 생각
        -> 법원, 경찰서, 교도소, 학교, 병원, 체육관, 공원, 건설회사...
        -> 학교도 세부적으로... 초등학교, 중학교, 고등학교, 대학교, 대학원
        -> 병원도 세부적으로... 소아과 의사, 정신과 의사, 외과 의사, 산부인과 의사...
    - "의사"라는 클래스를 하나 만들어서 다양한 과별로 의사 객체를 생성
    - 도시 건설 게임을 하는 유저는 이런 클래스들을 적절히 사용하여 도시를 건설
        ~> 자바 프로그래머도 마찬가지

3. 패키지와 클래스 관계
    - 작은 프로그램을 개발하거나 나혼자 개발하는 상황에서는 폴더(패키지)의 역할이 크지 않다,
    - 프로젝트 규모가 크고 여러명이 협업을 통해 맡아서 하는 개발 업무가 있다면 클래스를 패키지별로 분류하여 사용하는게 필요

4. 패키지 선언
    - pakage 키워드 사용
    - 자바 소스코드 최상단에 선언 -> 대소문자 모두 가능하나 클래스명과의 구분을 위해서 보통 소문자로 작성
    - 패키지 생성은 관습적으로 회사 도메인 주소를 거꾸로 생성 -> 고유성을 위해서, 존재하지 않는 도메인도 상관 없음
    - VSCode 에서는 그냥 / 해주면 하위 폴더가 생성
    - 소스코드 창에서는 경로가 점(.)으로 표시
        예) pakage com.company.bbs.service;
    - 패키지 폴더가 바뀌면 알아서 자동 리팩토링 (개발툴 사용 시 장점)
    - 같은 이름의 클래스라도 패키지(폴더)를 분리해서 다른 패키지에 넣어 놓으면 같은 이름의 클래스라 하더라도 충돌 방지
        예) 5학년에 "홍길동"이라는 이름의 학생이 2명 있더라도 반이 틀리면 충돌날 일이 없음
    - 폴더 하나 만들어서 HelloWorld.java 옮기면 에러 ~> 상단에 패키지 선언을 안해줘서 (해주거나 또는 default package인 루트로 이동)

5. JAVA 패키지
    - 자주 사용되는 클래스 라이브러라들은 JDK에서 미리 패키지로 묶어서 유저가 애플리케이션 개발 시 사용할 수 있도록 제공
    - 결국 이런 패키지들은 뭐가 있고 구현하고자 하는 것에 적절한게 무엇인지를 빨리 파악하여 사용하는게 중요
    - 가져와서 사용할 때는 import 키워드를 사용
        java.lang   기본 클래스, 수학, 문자열, 입출력 ...   String, Math
        java.import 입출력 관련                            FileReader
        java.net    네트워크 관련                          Socket
        java.nio    새로운 입출력 관련 클래스               Buffer
        java.util   유용한 유틸리티 관련                    Date, Calendar, 자료구조 관련 ArrayList
        java.time   날짜, 시간 관련                        
        java.crypto 암호화 관련 확장 클래스                 Cipher
        java.swing  원도우 GUI 관련 확장 클래스             JF Frame
    - 기본 클래스이자 중요한 것들이 많아 자동 import
    - javax 는 추가 확장된 자바 패키지

6. 패키지 import 
    - 다른 폴더(패키지)에 위치한 클래스를 현재 내가 작성하는 소스코드에서 사용하고자 할 때 사용
    - import 작성은 package 선언 다음에 작성
    - 여러 번 작성이 가능
    - * 를 사용하면 해당 패키지의 모든 클래스를 포함
        예) import java.io.*;
        예) import java.util.Date; or import java.util.*;

7. 자동 import VSCode
    - Alt + Shift + O 
    - 단축키가 갑자기 기억이 안난다면 ~> 빠른 수정(Ctrl + .)

8. 프로젝트 생성
    - Create Java Project (Ctrl + Shift + P) -> 보기메뉴 -> 명령 팔레트
    - 프로젝트 개념
        여러 개의 자바 소스코드를 하나의 폴더에 담아놓은 몪음 바구니
        보통의 경우 자바 프로젝트에는 여러 개의 자바 소스 코드가 있겠지만 한 개로도 가능
    - Create ... 자동 생성
        최근의 프레임워크들은 자동으로 프로젝트를 생성 -> 처음 사용자가 아주 편리하게 기본 환경을 셋팅
        백엔드 뿐만 아니라 많은 프런트엔드 프레임워크들도 마찬가지
    - 프로젝트명과 클래스명
        자바는 전체 코드가 클래스로 되어 있고, 이 클래스명과 소스 파일명은 -> 일치
        클래스명은 관례적으로 대문자로 시작하기에 패키지명은 보통 소문자로 명명 -> 프로젝트명은 크게 상관 X
    - 폴더 열기
        프로젝트 생성 후 해당 폴더로 VSCode 편집기가 안열렸다면 모두 종료 후 해당 프로젝트 폴더 드래그해서 오픈
        Ctrl + K (잠시후) Ctrl + O 
        파일 메뉴 > 폴더 열기