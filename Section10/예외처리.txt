[ 자바에서의 예외(Exception) 처리]
프로그램 실행 중에 발생할 수 있는 예기치 않은 상황을 다루는 방법입니다. 
예외 처리를 통해 프로그램이 예외 상황에 대처할 수 있도록 하며, 이를 통해 프로그램의 안정성을 높일 수 있습니다. 

[ 예외(Exception) ]
예외란 프로그램 실행 중에 발생하는 예기치 않은 상황을 의미합니다. 
이러한 상황은 예외 처리를 통해 프로그램이 안정적으로 실행될 수 있도록 해야 합니다.

[ Checked Exception과 Unchecked Exception ]
Checked Exception은 컴파일러가 강제로 예외 처리를 요구하는 예외입니다. 
예를 들어, 파일 입출력에서 발생하는 IOException이 여기에 해당됩니다.
Unchecked Exception은 RuntimeException 클래스를 상속받는 예외로, 컴파일러가 예외 처리를 강제하지 않습니다. 
예를 들어, NullPointerException이 여기에 해당됩니다.

[ try-catch 블록 ]
try 블록 안에 예외가 발생할 수 있는 코드를 작성하고, catch 블록에서 예외를 처리합니다.
예외가 발생하면 해당 예외를 처리하는 catch 블록으로 제어가 이동합니다.

[ finally 블록 ] 
finally 블록은 예외 발생 여부와 관계없이 항상 실행됩니다. 주로 리소스의 해제나 정리 작업에 사용됩니다.

[ 예외의 전파 ]
메서드가 예외를 처리하지 않고 외부로 전파되면, 호출한 곳에서 예외를 처리해야 합니다.

[ try-with-resources ]
자바 7부터 도입된 try-with-resources 구문을 사용하면 자동으로 리소스를 해제할 수 있습니다. 
이를 활용하면 별도로 close() 메서드를 호출하지 않아도 됩니다.