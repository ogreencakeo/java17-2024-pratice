[ 스레드(Thread) ]
스레드는 프로세스 내에서 실행되는 각각의 작업 흐름을 나타냅니다. 
자바에서는 Thread 클래스를 상속받거나 Runnable 인터페이스를 구현하여 스레드를 생성할 수 있습니다.

[ 스레드 풀(Thread Pool) ]
스레드 풀은 미리 정해진 개수의 스레드를 가지고 있는 스레드 그룹을 말합니다. 
이 그룹에는 작업을 처리할 준비가 된 스레드들이 포함되어 있습니다. 
스레드 풀은 스레드 생성 및 제거에 따른 오버헤드를 줄이고, 여러 작업을 효율적으로 관리하고 분배하기 위해 사용됩니다.

[ 스레드 풀 폭증(Thread Pool Explosion) ]
스레드 풀 폭증은 스레드 풀이 너무 많은 작업을 동시에 처리하려고 할 때 발생할 수 있는 문제를 의미합니다. 
스레드 풀 폭증은 일반적으로 스레드 수가 너무 많아져서 시스템의 자원을 과도하게 사용하거나 성능 저하를 초래할 수 있습니다. 
따라서 적절한 스레드 풀 크기를 선택하는 것이 중요합니다.

[ 스레드와 큐와의 관계 ]
스레드 풀은 작업을 큐(Queue)에 저장하고, 스레드들은 큐에서 작업을 가져와 실행합니다. 
일반적으로 작업을 스레드 풀에 제출하면, 이 작업은 큐에 추가됩니다. 
각 스레드는 큐에서 작업을 가져와 실행하고, 작업이 완료되면 다음 작업을 가져오기 위해 다시 큐를 확인합니다.
이러한 방식으로 큐는 스레드 풀과 작업 간의 인터페이스 역할을 하며, 스레드 풀은 이 큐를 통해 작업을 효율적으로 처리할 수 있습니다.

[ ExecutorService 인터페이스 ]
ExecutorService는 스레드 풀을 나타내는 인터페이스입니다. 
이 인터페이스는 스레드 풀에서 작업을 제출하고 관리하기 위한 다양한 메서드를 정의하고 있습니다.
ExecutorService를 사용하면 스레드 풀을 생성하고 작업을 제출하거나 작업의 완료를 확인할 수 있습니다.

ExecutorService 인터페이스는 다양한 구현체를 제공하여 스레드 풀을 다르게 구성할 수 있습니다. 
예를 들어, ThreadPoolExecutor 클래스는 ExecutorService의 구현 중 하나로, 커스터마이징된 스레드 풀을 생성할 수 있도록 해줍니다.

[ Executors 클래스 ] 
Executors 클래스는 스레드 풀을 생성하기 위한 유틸리티 클래스입니다. 
이 클래스는 다양한 팩토리 메서드를 제공하여 간단하게 스레드 풀을 생성할 수 있도록 도와줍니다.

Executors 클래스의 주요 메서드 중 일부는 다음과 같습니다

newFixedThreadPool(int nThreads): 
▶ 고정된 개수의 스레드를 가진 스레드 풀을 생성합니다.

newCachedThreadPool(): 
▶ 필요에 따라 스레드를 생성하는 캐시형 스레드 풀을 생성합니다.

newSingleThreadExecutor():
▶ 단일 스레드로 구성된 스레드 풀을 생성합니다.

newScheduledThreadPool(int corePoolSize): 
▶ 일정한 시간 간격으로 작업을 수행할 수 있는 스레드 풀을 생성합니다.

이러한 팩토리 메서드를 사용하면 간단하게 스레드 풀을 생성할 수 있고, ExecutorService를 반환하여 작업을 스레드 풀에 제출할 수 있습니다.

[ ExecutorService 작업원리 ]

스레드 관리의 추상화:
ExecutorService는 개발자가 스레드를 직접 생성하고 관리할 필요 없이, 작업을 스레드 풀에 제출할 수 있습니다. 
이는 스레드 관리에 대한 부담을 줄여줍니다.

스레드 재사용 및 성능 향상:
스레드 풀 내의 스레드는 미리 생성되어 대기 상태에 있으므로 작업을 처리할 때마다 스레드를 생성하고 소멸하는 비용이 줄어듭니다. 
이는 성능 향상에 도움을 줍니다.

작업 큐를 통한 작업 분배:
ExecutorService는 작업을 큐에 저장하고 사용 가능한 스레드에게 작업을 할당합니다. 
이를 통해 작업을 효율적으로 분배할 수 있습니다.

작업 완료 및 결과 관리:
작업이 완료되면 Future를 통해 작업 결과를 받아올 수 있습니다.
이를 통해 비동기 작업의 결과를 효과적으로 처리할 수 있습니다.

자원 관리와 안정성 확보:
ExecutorService는 스레드 풀의 크기, 작업 대기 큐의 크기 등을 설정할 수 있어서 자원을 효율적으로 관리하고 시스템의 안정성을 확보할 수 있습니다.

[ 스레드 풀 생성 ]
1. newCachedThreadPool()
이 메서드는 초기 스레드 수가 0개인 스레드 풀을 생성합니다.
요청된 작업이 들어오면 필요에 따라 새로운 스레드를 생성합니다.
스레드가 유휴 상태일 경우, 일정 시간이 지나면 스레드를 종료합니다.
코어 스레드 수는 0이며, 최대 스레드 수는 Integer.MAX_VALUE입니다.

2. newFixedThreadPool(int nThreads)
이 메서드는 지정된 수의 스레드를 갖는 고정 크기 스레드 풀을 생성합니다.
초기 스레드 수와 코어 스레드 수는 모두 nThreads로 설정됩니다.
최대 스레드 수도 nThreads로 설정됩니다.

[ 스레드 풀 종료 ]
1. shutdown()
shutdown() 메서드는 현재 진행 중인 작업을 모두 완료한 후에 스레드 풀을 종료합니다.
스레드 풀에 새 작업을 제출하면 RejectedExecutionException이 발생합니다.

2. awaitTermination(long timeout, TimeUnit unit)
awaitTermination() 메서드는 스레드 풀이 종료될 때까지 대기합니다.
timeout은 최대 대기 시간을 의미하며, unit은 시간 단위를 지정합니다.
모든 작업이 완료되고 지정된 시간이 경과하면 true를 반환하고, 아직 작업이 남아있는 경우 false를 반환합니다.
