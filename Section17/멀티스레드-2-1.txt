[ 데몬스레드 (Daemon Thread) ]
백그라운드 작업을 수행하고 일반 스레드의 보조 역할

▶ 데몬스레드란?
데몬스레드는 백그라운드에서 실행되는 스레드로, 일반 스레드가 모두 종료된 경우 자동으로 종료되는 특별한 종류의 스레드입니다. 
주로 일반 스레드의 보조 역할을 수행하며, 일반 스레드 그룹의 멤버로 동작합니다.

데몬스레드의 특징과 사용 이유
▶ 데몬스레드는 주로 백그라운드 작업을 처리하는 데 사용됩니다. 
예를 들어, 가비지 컬렉터(Garbage Collector)나 자동 저장 기능 등을 구현할 때 
백그라운드에서 주기적으로 실행되어야 하는 작업을 데몬스레드로 구현할 수 있습니다.

데몬스레드는 일반 스레드 그룹에 속해 있지만, 모든 일반 스레드가 종료되면 자동으로 종료되므로 프로그램이 종료될 때까지 계속 실행되지 않습니다.
주의할 점은 데몬스레드는 반드시 start() 메서드를 호출하기 전에 setDaemon(true) 메서드로 설정해주어야 합니다.

Thread daemonThread = new Thread(() -> {
    while (true) {
        // 데몬스레드의 작업 내용
    }
});
daemonThread.setDaemon(true); // 데몬스레드로 설정
daemonThread.start(); // 스레드 시작

[ 스레드 그룹 (Thread Group) ]
관련된 스레드들을 그룹화하여 효율적으로 관리할 수 있도록 해줍니다.

스레드 그룹이란?
▶ 스레드 그룹은 관련된 스레드들을 논리적으로 그룹화하여 관리할 수 있는 자바의 기능입니다. 
스레드 그룹은 트리 구조로 구성되어 있고, 최상위 스레드 그룹은 main 스레드 그룹입니다.

▶ 스레드 그룹의 특징과 사용 이유
스레드 그룹을 사용하면 스레드를 논리적으로 분류하고 관리할 수 있습니다. 
예를 들어, 한 번에 여러 스레드를 일괄적으로 관리하거나 우선순위 설정, 데몬스레드 여부 설정 등을 그룹 단위로 적용할 수 있습니다.

스레드 그룹은 스레드의 계층 구조를 표현하므로, 계층 구조에 따라 스레드의 상태를 쉽게 파악하고 관리할 수 있습니다.
예외 처리에서 스레드 그룹을 사용하면 한 그룹에 속한 모든 스레드에 동일한 예외 처리 로직을 적용할 수 있습니다.

// 스레드 그룹 생성
ThreadGroup myGroup = new ThreadGroup("MyThreadGroup");

// 스레드를 스레드 그룹에 속하도록 생성
Thread thread1 = new Thread(myGroup, () -> {
    // 스레드의 작업 내용
});

// 스레드 그룹의 모든 스레드를 순회하면서 interrupt() 호출
myGroup.interrupt();

// 스레드 그룹에 속한 모든 스레드를 출력
myGroup.list();


[ 스레드들을 계층적으로 구조화하여 관리 ]
▶ 여기서 main 스레드, sub 스레드, 그리고 grandsub 스레드는 이러한 계층 구조에서 스레드들을 나타내는 것입니다.

Main 스레드 (Main Thread)
▶ 자바 프로그램이 시작되면 JVM(Java Virtual Machine)에 의해 main 메서드가 포함된 스레드에서 실행됩니다. 
이 스레드는 주로 프로그램의 진입점(entry point) 역할을 합니다.
main 스레드는 일반적으로 JVM이 시작되면서 자동으로 생성되는 최상위 스레드 그룹인 main 스레드 그룹에 속합니다.

Sub 스레드 (Sub Thread)
▶ Sub 스레드는 main 스레드 또는 다른 스레드에서 생성된 자식 스레드입니다. 
일반적으로 프로그램의 여러 작업을 병렬로 처리하기 위해 생성됩니다.
Sub 스레드는 main 스레드 그룹에 속하거나, main 스레드 그룹의 하위 그룹에 속할 수 있습니다.

Grandsub 스레드 (Grandsub Thread)
▶ Grandsub 스레드는 sub 스레드의 자식 스레드로, 즉 sub 스레드가 생성한 또 다른 하위 스레드를 의미합니다.
예를 들어, main 스레드에서 sub 스레드를 생성하고, sub 스레드에서 다시 grandsub 스레드를 생성하는 경우가 있습니다.

그러면 main 스레드 그룹에 속한 main 스레드가 sub 스레드를 생성하고, 
sub 스레드 그룹에 속한 sub 스레드가 grandsub 스레드를 생성하는 식으로 스레드 계층 구조가 형성됩니다.

따라서, main 스레드는 프로그램의 진입점을 담당하고, 
sub 스레드는 main 스레드에서 생성된 자식 스레드를 나타내며, 
grandsub 스레드는 sub 스레드에서 생성된 자식 스레드를 나타냅니다. 
이런 계층적인 구조를 통해 프로그램의 스레드를 조직화하고 관리할 수 있습니다.

[ Thread 클래스에서 제공되는 다양한 메서드들 ]
1. activeCount()
설명: activeCount() 메서드는 현재 활성화된 스레드의 수를 반환합니다. 
이는 현재 스레드 그룹 내에서 실행 중인 스레드의 수를 의미합니다.

ThreadGroup group = Thread.currentThread().getThreadGroup();
System.out.println("활성화된 스레드 수: " + group.activeCount());

2. destroy()
설명: destroy() 메서드는 스레드를 강제로 종료시킵니다. 
이 메서드는 일반적으로 사용되지 않으며, 스레드의 종료를 안전하게 처리하기 위해 interrupt() 메서드를 사용하는 것이 권장됩니다.

Thread thread = new Thread(() -> {
    while (!Thread.currentThread().isInterrupted()) {
        // 스레드 작업 수행
    }
});
thread.start();

// 스레드 종료
thread.interrupt(); // 스레드 안전하게 종료

3. isAlive()
설명: isAlive() 메서드는 스레드가 활성화되어 실행 중인지 여부를 반환합니다. 
스레드가 시작되고 아직 종료되지 않았으면 true를 반환하고, 종료되었으면 false를 반환합니다.

Thread thread = new Thread(() -> {
    System.out.println("스레드 실행 중...");
});
thread.start();

System.out.println("스레드가 실행 중인가? " + thread.isAlive()); // true

4. getName()
설명: getName() 메서드는 스레드의 이름을 반환합니다. 
스레드를 생성할 때 이름을 지정하지 않으면 기본적으로 "Thread-N" 형식의 이름이 부여됩니다.

Thread thread = new Thread(() -> {
    System.out.println("현재 스레드의 이름: " + Thread.currentThread().getName());
});
thread.setName("MyThread"); // 스레드의 이름 설정
thread.start();

5. getParent()
설명: getParent() 메서드는 현재 스레드 그룹의 부모 스레드 그룹을 반환합니다.

ThreadGroup currentGroup = Thread.currentThread().getThreadGroup();
ThreadGroup parentGroup = currentGroup.getParent();
System.out.println("부모 스레드 그룹: " + parentGroup.getName());

6.  isDaemon(), setDaemon(boolean on)
설명: isDaemon() 메서드는 스레드가 데몬스레드인지 여부를 반환합니다. 
setDaemon(boolean on) 메서드는 스레드를 데몬스레드로 설정하거나 일반 스레드로 변경할 수 있습니다.

Thread daemonThread = new Thread(() -> {
    // 데몬스레드 작업 수행
});
daemonThread.setDaemon(true); // 데몬스레드로 설정
daemonThread.start();

System.out.println("데몬스레드인가? " + daemonThread.isDaemon()); // true

7. list()
설명: list() 메서드는 현재 스레드 그룹에 속한 모든 스레드의 정보를 콘솔에 출력합니다.

ThreadGroup group = Thread.currentThread().getThreadGroup();
group.list();

8. interrupt()
설명: interrupt() 메서드는 스레드의 작업을 중단시키기 위해 사용됩니다. 
스레드 내에서 isInterrupted() 메서드를 통해 인터럽트 상태를 확인하고 작업을 안전하게 중단시킬 수 있습니다.

Thread thread = new Thread(() -> {
    while (!Thread.currentThread().isInterrupted()) {
        // 스레드 작업 수행
    }
});
thread.start();

// 스레드 중단
thread.interrupt();
