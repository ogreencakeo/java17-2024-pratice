[ 스레드 풀에서 작업 처리 ]
스레드 풀에서 작업을 처리하기 위해 Runnable 또는 Callable 인터페이스를 구현한 작업을 생성하고 제출합니다.
이를 통해 스레드 풀 내의 스레드들이 작업을 실행할 수 있습니다.

[작업 생성 및 제출]
1. Runnable 작업 생성
Runnable 인터페이스를 구현하여 작업을 생성합니다.

public class MyRunnableTask implements Runnable {
    @Override
    public void run() {
        // 작업 내용
        System.out.println("Runnable task is running on thread: " + Thread.currentThread().getName());
    }
}

2. Callable 작업 생성
Callable 인터페이스를 구현하여 작업을 생성하고 작업 결과를 반환할 수 있습니다.

import java.util.concurrent.Callable;

public class MyCallableTask implements Callable<String> {
    @Override
    public String call() throws Exception {
        // 작업 내용
        return "Callable task is running on thread: " + Thread.currentThread().getName();
    }
}

[ Runnable과 Callable의 관계 ]
▶ Runnable과 Callable은 모두 작업을 수행하기 위한 인터페이스입니다.
▶ Runnable은 작업을 수행하고 반환 값이 없는 경우에 사용됩니다.
▶ Callable은 작업을 수행하고 반환 값이 있는 경우에 사용됩니다. 
    작업 실행 결과를 받기 위해 Future 객체를 통해 결과를 얻을 수 있습니다.

[ 스레드 풀에서 작업 처리 ]
ExecutorService를 사용하여 스레드 풀을 생성하고 작업을 제출합니다.

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ThreadPoolExample {
    public static void main(String[] args) {
        // 스레드 풀 생성 (3개의 스레드를 가진 고정 크기 스레드 풀)
        ExecutorService executor = Executors.newFixedThreadPool(3);

        // Runnable 작업 제출
        executor.submit(new MyRunnableTask());

        // Callable 작업 제출 (작업 결과를 받기 위해 Future 사용)
        Future<String> futureResult = executor.submit(new MyCallableTask());

        try {
            // 작업 결과 가져오기
            String result = futureResult.get();
            System.out.println("Callable task result: " + result);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        // 스레드 풀 종료
        executor.shutdown();
    }
}

executor.submit(new MyRunnableTask()): Runnable 작업을 스레드 풀에 제출합니다.
executor.submit(new MyCallableTask()): Callable 작업을 스레드 풀에 제출하고, Future 객체를 통해 작업 결과를 받을 수 있습니다.
executor.shutdown(): 모든 작업이 완료된 후 스레드 풀을 종료합니다.

위와 같이 작업을 제출하면 ExecutorService에 의해 스레드 풀 내의 스레드들이 작업을 순차적 또는 동시에 처리하게 됩니다. 
Runnable 또는 Callable 작업은 스레드 풀의 스레드들에 의해 실행되며, 작업이 완료되면 스레드는 다음 작업을 처리하거나 대기 상태에 들어갑니다.

[ 작업 처리 요청 ]
작업 처리 요청은 스레드 풀에 작업을 제출하여 해당 작업을 실행하도록 요청하는 것을 말합니다. 
스레드 풀은 제출된 작업을 수행하기 위해 사용 가능한 스레드를 할당하고 작업을 실행합니다.
작업을 처리 요청하는 방법은 크게 execute()와 submit() 메서드를 사용하는 두 가지 방법이 있습니다.

[ execute(Runnable command) ]
execute() 메서드는 Runnable 타입의 작업을 스레드 풀에 제출합니다.
이 메서드는 작업의 성공 또는 실패 여부를 알려주지 않고, 작업의 실행이 완료될 때까지 기다리지 않습니다.

ExecutorService executor = Executors.newFixedThreadPool(3);
executor.execute(new MyRunnableTask()); // Runnable 작업을 스레드 풀에 제출
executor.shutdown(); // 스레드 풀 종료

[ submit(Callable<T> task) 
    또는 submit(Runnable task, T result) ]
submit() 메서드는 Callable 또는 Runnable 작업을 스레드 풀에 제출하고, 작업의 결과를 Future 객체로 반환합니다.
submit(Runnable task, T result)는 Runnable 작업을 제출하고 지정된 결과 값을 반환합니다.

ExecutorService executor = Executors.newFixedThreadPool(3);
Future<String> futureResult = executor.submit(new MyCallableTask()); // Callable 작업을 스레드 풀에 제출
executor.shutdown(); // 스레드 풀 종료

try {
    String result = futureResult.get(); // 작업 결과를 가져옴 (블로킹)
    System.out.println("Callable task result: " + result);
} catch (InterruptedException | ExecutionException e) {
    e.printStackTrace();
}

[ 작업 처리 중 예외 발생 시 ]
1. execute()
▶ execute() 메서드는 작업 처리 중 발생한 예외를 즉시 처리하지 않습니다.
▶ 작업을 수행하는 스레드에서 예외가 발생하면 해당 스레드는 종료되고, 해당 작업은 스레드 풀에서 제거됩니다.
▶ 예외는 기본적으로 스레드의 UncaughtExceptionHandler를 통해 처리됩니다.

2. submit()
▶ submit() 메서드로 제출된 작업은 Future.get() 메서드를 호출할 때 예외가 발생하면 ExecutionException으로 감싸진 예외를 반환합니다.
▶ 따라서 submit()을 사용하면 작업 처리 중 발생한 예외를 명시적으로 처리할 수 있습니다.

이와 같이 execute()와 submit() 메서드를 사용하여 작업을 처리하면서 예외가 발생했을 때의 처리 방법을 적절히 선택하여 작업을 관리할 수 있습니다. 
submit()을 사용하면 작업 결과를 명시적으로 처리할 수 있고, 예외가 발생한 경우에도 예외를 적절히 처리할 수 있습니다.

[ 블로킹(blocking) ]
블로킹은 프로그램이 작업의 완료를 기다리는 동안 해당 스레드가 대기 상태에 있음을 의미합니다. 
즉, 다른 작업을 수행하지 않고 해당 작업의 완료를 기다리는 것을 말합니다.

[ 블로킹 방식의 작업 완료와 통보받기 ]
Future 객체를 사용하여 작업의 완료를 블로킹 방식으로 기다리고 작업 결과를 가져올 수 있습니다.

1. Future.get()
Future.get() 메서드는 작업이 완료될 때까지 기다리고, 작업 결과를 반환합니다.
이 메서드는 블로킹 메서드로, 작업이 완료될 때까지 스레드는 대기 상태에 있습니다.

ExecutorService executor = Executors.newSingleThreadExecutor();
Future<Integer> futureResult = executor.submit(() -> {
    Thread.sleep(2000); // 예시로 2초 동안 작업을 수행
    return 123;
});

try {
    System.out.println("Waiting for task completion...");
    Integer result = futureResult.get(); // 작업 완료를 블로킹으로 기다림
    System.out.println("Task result: " + result);
} catch (InterruptedException | ExecutionException e) {
    e.printStackTrace();
}

executor.shutdown(); // 스레드 풀 종료

[ Future 객체의 메서드 ]
1. cancel(boolean mayInterruptIfRunning)
cancel() 메서드는 작업을 취소하려고 시도합니다.
mayInterruptIfRunning 매개변수가 true인 경우, 현재 작업이 실행 중이면 인터럽트를 시도하여 작업을 중지시킵니다.
작업이 이미 완료된 경우에는 취소할 수 없습니다.

2. isCancelled()
isCancelled() 메서드는 작업이 취소되었는지 여부를 반환합니다.
작업이 취소되었으면 true, 아니면 false를 반환합니다.

3. isDone()
isDone() 메서드는 작업이 완료되었는지 여부를 반환합니다.
작업이 완료되었으면 true, 아니면 false를 반환합니다.

Future 객체를 사용하면 비동기 작업의 상태를 확인하고 작업 완료를 블로킹 방식으로 기다릴 수 있습니다. 
또한 작업을 취소하거나 작업의 완료 여부를 확인할 수 있어서 유연한 비동기 작업 관리가 가능합니다.