[ TreeSet 자료구조 클래스 ]
- 사용도 조금 까다로운데, 기본적으로 (1) 내부 동작이나 (2) 메서드 알아야 할게 많아서 어렵게 느낌
- TreeMap 공부를 쉽게 하기 위해서 잘 이해하는게 중요!
- 실제로, java.util 패키지에 있는 수 많은 자료구조 클래스를 사용법만 알아도 개발 시간 단축
- 하지만, 혼자 공부하기에는 어렵고 시간도 많이 걸리는게 사실
- Collection 계층 구조를 다시 한 번 체크해야함

TreeSet은 중복된 요소를 허용하지 않으며, 
이진 검색 트리(Binary Search Tree)의 성질을 가지므로 삽입, 삭제, 검색 연산의 시간 복잡도가 O(log N)이다. 
따라서 큰 데이터셋에서 성능이 우수하게 유지된다.

[ 매우 중요 ]
- Tree로 시작하는 자료구조 클래스는 데이터 저장 시 자동 정렬이 되어진다.
- 이러한 이유로 어떤 객체를 Tree형 자료구조에 저장할 때는 반드시 순서를 결정할 수 있어야 한다.
- 이러한 순서를 결정하기 위해서 Comparable인터페이스를 구현해 놓아야만 한다.

[ 코드 ]
class Person implements Comparable<Person> {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int compareTo(Person other) {
        // 나이 순으로 정렬하기
        return Integer.compare(this.age, other.age);
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

기본적으로 처음에 TreeSet 공부한다 하면 머릿속에서 아래 정도는 바로 튀어나오도록 기억
--------------------------------------------------------------------------------------------
[ 1. Set 인터페이스를 구현한 대표 클래스(구현체) ]
- HashSet, TreeSet
- 따라서, Set의 특성인 "순서가 없는 데이터 집합", "중복 허용X" 특성을 가지고 있음.

[ 2. 이진 탐색 트리(Set)를 기반으로 구현된 컬렉션 ]
- BST는 데이터를 정렬된 상태로 저장하는 자료구조
- TreeSet은 이러한 특별한 자료 저장 구조를 사용하여 중복되지 않는 값을 자동 정렬된 상태로 저장
- 트리 구조 중에서 이진 트리 구조(BST) 형태를 가진다. (크리스마스 트리를 생각)

[ 3. 자동 정렬 ]
- 순서가 없는 데이터를 TreeSet에 담으면 자동 정렬
- 기본은 오름차순 (Ascending)
- TreeSet 같은 경우는 <K, V> 쌍으로 되어있는데 Key를 기준으로 오름차순 정렬
---------------------------------------------------------------------------------------------

[ TreeSet 메서드 ]
1. Group
        add(E e)                요소 추가
        contains(Object o)      요소가 포함되었는지 체크
        remove(Object o)        요소 제거
        clear()                 비우기
        size()                  요소 개수 반환
        isEmpty()               TreeSet이 비어 있는지 확인
        first()                 TreeSet 요소중에서 가장 작은 최솟값 반환
        last()                  TreeSet 요소중에서 가장 큰 최댓값 반환
2. Group
        floor(E e)              지정된 요소와 동일 or 작은거에서 가장 큰 요소를 반환  
        ceiling(E e)            지정된 요소와 동일 or 큰거에서 가장 작은 요소를 반환
        higher(E e)             지정된 요소보다 큰거에서 가장 작은 요소를 반환
        lower(E e)              지정된 요소보다 작은거에서 가장 큰 요소를 반환
3. Group
        subSet()
        headSet()
        tailSet()
---------------------------------------------------------------------------------------------
